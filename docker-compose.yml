version: "3"
#have a service called app, and the build section of the configuration will have a context which is '.' the root path.
services:
  app:
    build:
      context: . #current directory.
    ports:
      - "8000:8000" #Map our project from port 8000 on our HOST to port 8000 on our Image
    volumes: #Volumes allows us to get the UPDATES that we make to our project INTO our Docker image in REAL-TIME. (AUTOMATIC CHANGES TO DOCKER IMAGE)
      - ./app:/app # map our ./app folder to /app folder in the Docker image, similar to nodemon
    #sh -c #run the command using shell, #0.0.0.0:8000 run python server on all IPs on port 8000
    command: >
      sh -c "python manage.py wait_for_db &&
      python manage.py migrate &&
      python manage.py runserver 0.0.0.0:8000"
    environment: 
      - DB_HOST=db # has to equal db
      - DB_NAME=app
      - DB_USER=postgres
      - DB_PASS=admin
      #depends_on - set different service to depend on another service.
    depends_on: 
      - db # This app depends on db, therefore the db will be initialized first.,
      # make sure you include some code "wait_for_db" to wait for the db to be ready before starting app
      #you can add multiple dependencies if you have multiple services: e.g: redis
  db:
    image: postgres:10-alpine # locate the postgress image on dockerhub website
    environment: #environment variables
      - POSTGRES_DB=app
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=admin


